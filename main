#!/usr/bin/env ruby

require 'json'

class DiagramFile
  def initialize(file_path)
    @file_path = file_path 
  end

  def to_import_codes
    return nil unless py?
    return nil if init_file?
    return nil if test_file?
    return nil if grep_diagram_class_names.empty?
    grep_diagram_class_names.map do |class_name|
      chomped_class_name = class_name.chomp
      name =  chomped_class_name.gsub("class ", "").gsub(/\(\w.*\:/, "")
      {
        code: "import #{import_file_path} from #{name}",
        name: name,
        sub_dir_name: sub_dir_name
      }
    end
  end

  private

  def import_file_path
    @file_path.gsub(".py", "").gsub("./diagrams", "").gsub("/", ".").gsub(".diagrams", "diagrams")
  end

  def sub_dir_name
    @file_path.gsub(".py", "").gsub("./diagrams", "").split("/").last
  end

  def grep_diagram_class_names
    @grep_diagram_class_names ||= File.open(@file_path, "r").grep(/class /).grep(/\):/).grep_v(/class _/).to_a
  end

  def test_file?
    @file_path.include?("test")
  end

  def init_file?
    @file_path.include?("__init__.py")
  end

  def py?
    File.extname(@file_path) == ".py"
  end
end

class DiagramPngFinder
  def self.call(sub_dir_name, diagram_name)
    Dir.glob("./diagrams/resources/**/#{sub_dir_name}/#{dasherize(underscore(diagram_name))}.png").first
  end

  private

  def self.underscore(camel_cased_word)
    return camel_cased_word unless /[A-Z-]|::/.match?(camel_cased_word)
    word = camel_cased_word.to_s.gsub("::", "/")
    word.gsub!(/([A-Z\d]+)([A-Z][a-z])/, '\1_\2')
    word.gsub!(/([a-z\d])([A-Z])/, '\1_\2')
    word.tr!("-", "_")
    word.downcase!
    word
  end

  def self.dasherize(underscored_word)
    underscored_word.tr("_", "-")
  end
end

all_import_codes = Dir.glob('**/*', File::FNM_DOTMATCH, base: '.').flat_map do |file|
  file_path = File.join('.', file)
  DiagramFile.new(file_path).to_import_codes
end.compact

alfred_format = {
  items: all_import_codes.map do |code|
    {
      title: code[:code].gsub(".", " "),
      subtitle: code[:code],
      arg: code[:code],
      icon: {
        path: DiagramPngFinder.call(code[:sub_dir_name], code[:name])
      }
    }
  end
}

puts alfred_format.to_json
